const express = require('express');
const bodyParser = require('body-parser');

const app = express();
app.use(bodyParser.json());

// Local variables to store data
let rooms = [];
let bookings = [];

// Create a room
app.post('/rooms', (req, res) => {
  const { seats, amenities, price } = req.body;
  const room = { id: rooms.length + 1, seats, amenities, price };
  rooms.push(room);
  res.status(201).json(room);
});

// Book a room
app.post('/bookings', (req, res) => {
  const { customerName, date, startTime, endTime, roomId } = req.body;

  // Check if the room is available for booking
  const isRoomAvailable = bookings.some(booking =>
    booking.roomId === roomId && booking.date === date &&
    ((booking.startTime >= startTime && booking.startTime < endTime) ||
    (booking.endTime > startTime && booking.endTime <= endTime))
  );
  if (isRoomAvailable) {
    return res.status(409).json({ error: 'Room is already booked for the given date and time.' });
  }

  const booking = { id: bookings.length + 1, customerName, date, startTime, endTime, roomId };
  bookings.push(booking);
  res.status(201).json(booking);
});

// List all rooms with booked data
app.get('/rooms/bookings', (req, res) => {
  const roomsWithBookings = rooms.map(room => {
    const roomBookings = bookings.filter(booking => booking.roomId === room.id);
    return {
      roomName: `Room ${room.id}`,
      bookings: roomBookings.map(booking => ({
        customerName: booking.customerName,
        date: booking.date,
        startTime: booking.startTime,
        endTime: booking.endTime
      }))
    };
  });
  res.json(roomsWithBookings);
});

// List all customers with booked data
app.get('/customers/bookings', (req, res) => {
  const customersWithBookings = bookings.map(booking => {
    const room = rooms.find(room => room.id === booking.roomId);
    return {
      customerName: booking.customerName,
      roomName: `Room ${room.id}`,
      date: booking.date,
      startTime: booking.startTime,
      endTime: booking.endTime
    };
  });
  res.json(customersWithBookings);
});

// List bookings by customer
app.get('/bookings/:customerName', (req, res) => {
  const customerName = req.params.customerName;
  const customerBookings = bookings.filter(booking => booking.customerName === customerName);
  res.json(customerBookings);
});

// API documentation in Postman Docs
app.use('/docs', express.static('public'));

app.listen(3000, () => {
  console.log('Server started on port 3000');
});
